// C program for implementation of Merge Sort
#include <stdio.h>
#include <bits/stdc++.h>
using namespace std;

void merge(int arr[], int l, int m, int r);

/* l is for left index and r is right index of the
   sub-array of arr to be sorted */
void mergeSort(int arr[], int l, int r)
{
    if (l < r)
    {
        // Same as (l+r)/2, but avoids overflow for
        // large l and h
        int m = l+(r-l)/2;

        // Sort first and second halves
        mergeSort(arr, l, m);
        mergeSort(arr, m+1, r);

        merge(arr, l, m, r);
    }
}

/* Function to print an array */
void printArray(int arr[], int size)
{
    int i;
    for (i=0; i < size; i++)
        printf("%d ", arr[i]);
    printf("\n");
}

// Driver program to test above functions
int main()
{
    int n,T,i;

    scanf("%d",&T);

    while(T--){
    
    scanf("%d",&n);
    int arr[n+1];
    for(i=0;i<n;i++)
      scanf("%d",&arr[i]);

    mergeSort(arr, 0, n-1);
    printArray(arr, n);
    }
    return 0;
}// } Driver Code Ends

void merge(int arr[], int l, int m, int r)
{
     // Your code here
     int i=0,j=0,k=l;
    int size1=m-l+1;
    int size2=r-m;
    int L[size1],R[size2];
    for (int p=l;p<=m;p++)
    {
        L[i]=arr[p];
        i++;
    }
    for (int q=m+1;q<=r;q++)
    {
        R[j]=arr[q];
        j++;
    }
    i=0;j=0;
    while(j<size2 && i<size1)
    {
        if (L[i]>R[j])
        {
            arr[k]=R[j];
            k++;
            j++;
        }
        else
        {
            arr[k]=L[i];
            i++;
            k++;
        }
    }
    while(j<size2)
    {
        arr[k]=R[j];
        k++;
        j++;
    }
    while(i<size1)
    {
        arr[k]=L[i];
        k++;
        i++;
    }
    return;
}